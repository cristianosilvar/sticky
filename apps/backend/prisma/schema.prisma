// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  name           String
  password       String
  email          String   @unique
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  
  // Relations
  orders         Order[]
  
  @@map("users")
}

model Movie {
  id              String      @id @default(uuid())
  title           String
  synopsis        String
  rating          Int
  durationMinutes Int         @map("duration_minutes")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  
  // Relations
  showtimes       Showtime[]
  
  @@map("movies")
}

model Order {
  id          String       @id @default(uuid())
  userId      String       @map("user_id")
  orderStatus OrderStatus  @map("order_status")
  totalPrice  Decimal      @map("total_price")
  createdAt   DateTime     @default(now()) @map("created_at")
  expiredAt   DateTime?    @map("expired_at")
  paidAt      DateTime?    @map("paid_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  
  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments    Payment[]
  tickets     Ticket[]
  
  @@map("orders")
}

model Showtime {
  id         String        @id @default(uuid())
  date       DateTime
  movieId    String        @map("movie_id")
  startAt    DateTime      @map("start_at")
  status     ShowtimeStatus
  basePrice  Decimal       @map("base_price")
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")
  
  // Relations
  movie      Movie         @relation(fields: [movieId], references: [id], onDelete: Cascade)
  tickets    Ticket[]
  
  @@map("showtimes")
}

model Payment {
  id        String   @id @default(uuid())
  orderId   String   @map("order_id")
  price     Decimal
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}

model Ticket {
  id          String   @id @default(uuid())
  orderId     String   @map("order_id")
  showtimeId  String   @map("showtime_id")
  price       Decimal
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  showtime    Showtime @relation(fields: [showtimeId], references: [id], onDelete: Cascade)
  
  @@map("tickets")
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  EXPIRED
}

enum ShowtimeStatus {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELLED
}